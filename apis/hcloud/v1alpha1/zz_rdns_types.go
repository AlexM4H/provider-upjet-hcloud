/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RdnsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RdnsParameters struct {

	// +kubebuilder:validation:Required
	DNSPtr *string `json:"dnsPtr" tf:"dns_ptr,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIPID *int64 `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerID *int64 `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServerID *int64 `json:"serverId,omitempty" tf:"server_id,omitempty"`
}

// RdnsSpec defines the desired state of Rdns
type RdnsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RdnsParameters `json:"forProvider"`
}

// RdnsStatus defines the observed state of Rdns.
type RdnsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RdnsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rdns is the Schema for the Rdnss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hcloudjet}
type Rdns struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RdnsSpec   `json:"spec"`
	Status            RdnsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdnsList contains a list of Rdnss
type RdnsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rdns `json:"items"`
}

// Repository type metadata.
var (
	Rdns_Kind             = "Rdns"
	Rdns_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rdns_Kind}.String()
	Rdns_KindAPIVersion   = Rdns_Kind + "." + CRDGroupVersion.String()
	Rdns_GroupVersionKind = CRDGroupVersion.WithKind(Rdns_Kind)
)

func init() {
	SchemeBuilder.Register(&Rdns{}, &RdnsList{})
}

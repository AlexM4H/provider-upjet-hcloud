/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IPAssignmentParameters struct {

	// +kubebuilder:validation:Required
	FloatingIPID *int64 `json:"floatingIpId" tf:"floating_ip_id,omitempty"`

	// +kubebuilder:validation:Required
	ServerID *int64 `json:"serverId" tf:"server_id,omitempty"`
}

// IPAssignmentSpec defines the desired state of IPAssignment
type IPAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAssignmentParameters `json:"forProvider"`
}

// IPAssignmentStatus defines the observed state of IPAssignment.
type IPAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPAssignment is the Schema for the IPAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hcloudjet}
type IPAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPAssignmentSpec   `json:"spec"`
	Status            IPAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAssignmentList contains a list of IPAssignments
type IPAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAssignment `json:"items"`
}

// Repository type metadata.
var (
	IPAssignment_Kind             = "IPAssignment"
	IPAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAssignment_Kind}.String()
	IPAssignment_KindAPIVersion   = IPAssignment_Kind + "." + CRDGroupVersion.String()
	IPAssignment_GroupVersionKind = CRDGroupVersion.WithKind(IPAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAssignment{}, &IPAssignmentList{})
}

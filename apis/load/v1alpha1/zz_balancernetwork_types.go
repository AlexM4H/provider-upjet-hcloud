/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerNetworkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BalancerNetworkParameters struct {

	// +kubebuilder:validation:Optional
	EnablePublicInterface *bool `json:"enablePublicInterface,omitempty" tf:"enable_public_interface,omitempty"`

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerID *int64 `json:"loadBalancerId" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkID *int64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// BalancerNetworkSpec defines the desired state of BalancerNetwork
type BalancerNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerNetworkParameters `json:"forProvider"`
}

// BalancerNetworkStatus defines the observed state of BalancerNetwork.
type BalancerNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerNetwork is the Schema for the BalancerNetworks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hcloudjet}
type BalancerNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerNetworkSpec   `json:"spec"`
	Status            BalancerNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerNetworkList contains a list of BalancerNetworks
type BalancerNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerNetwork `json:"items"`
}

// Repository type metadata.
var (
	BalancerNetwork_Kind             = "BalancerNetwork"
	BalancerNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerNetwork_Kind}.String()
	BalancerNetwork_KindAPIVersion   = BalancerNetwork_Kind + "." + CRDGroupVersion.String()
	BalancerNetwork_GroupVersionKind = CRDGroupVersion.WithKind(BalancerNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerNetwork{}, &BalancerNetworkList{})
}

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlgorithmObservation struct {
}

type AlgorithmParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BalancerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	NetworkID *int64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	NetworkIP *string `json:"networkIp,omitempty" tf:"network_ip,omitempty"`
}

type BalancerParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm []AlgorithmParameters `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteProtection *bool `json:"deleteProtection,omitempty" tf:"delete_protection,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerType *string `json:"loadBalancerType" tf:"load_balancer_type,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkZone *string `json:"networkZone,omitempty" tf:"network_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Target []TargetParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type TargetObservation struct {
}

type TargetParameters struct {

	// +kubebuilder:validation:Optional
	ServerID *int64 `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UsePrivateIP *bool `json:"usePrivateIp,omitempty" tf:"use_private_ip,omitempty"`
}

// BalancerSpec defines the desired state of Balancer
type BalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerParameters `json:"forProvider"`
}

// BalancerStatus defines the observed state of Balancer.
type BalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Balancer is the Schema for the Balancers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hcloudjet}
type Balancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerSpec   `json:"spec"`
	Status            BalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerList contains a list of Balancers
type BalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Balancer `json:"items"`
}

// Repository type metadata.
var (
	Balancer_Kind             = "Balancer"
	Balancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Balancer_Kind}.String()
	Balancer_KindAPIVersion   = Balancer_Kind + "." + CRDGroupVersion.String()
	Balancer_GroupVersionKind = CRDGroupVersion.WithKind(Balancer_Kind)
)

func init() {
	SchemeBuilder.Register(&Balancer{}, &BalancerList{})
}
